{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocs-gallery","text":"<p>Sphinx-Gallery features for mkdocs (no Sphinx dependency !).</p> <p> </p> <p> </p> <p>Do you love Sphinx-Gallery but prefer mkdocs over Sphinx for your documentation ? <code>mkdocs-gallery</code> was written for you ;) </p> <p>It relies on mkdocs-material to get the most of mkdocs, so that your galleries look nice !</p>"},{"location":"#installing","title":"Installing","text":"<pre><code>&gt; pip install mkdocs-gallery\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#1-create-a-source-gallery-folder","title":"1. Create a source gallery folder","text":"<p>First, create a folder that will contain your gallery examples, for example <code>docs/examples/</code>. It will be referenced by the <code>examples_dirs</code> configuration option.</p> <p>Then in this folder, you may add a readme. This readme should be written in markdown, be named <code>README</code> or <code>readme</code> or <code>Readme</code>, and have a <code>.md</code> or <code>.txt</code> extension.</p> <p>Note: the folder can be located inside the usual mkdocs source folder:</p> <pre><code>docs/                    # base mkdocs source directory\n\u2514\u2500\u2500 examples/            # base 'Gallery of Examples' directory\n    \u2514\u2500\u2500 README.md\n</code></pre> <p>or not</p> <pre><code>examples/            # base 'Gallery of Examples' directory\n\u2514\u2500\u2500 README.md\ndocs/                # base mkdocs source directory\n</code></pre>"},{"location":"#2-configure-mkdocs","title":"2. Configure mkdocs","text":""},{"location":"#a-basics","title":"a. Basics","text":"<p>Simply add the following configuration to you <code>mkdocs.yml</code>:</p> <pre><code>theme: material    # This theme is mandatory for now, see below\n\nplugins:\n  - gallery:\n      examples_dirs: docs/examples          # path to your example scripts\n      gallery_dirs: docs/generated/gallery  # where to save generated gallery\n      # ... (other options)\n\n  - search  # make sure the search plugin is still enabled\n</code></pre> <p>Most sphinx-gallery configuration options are supported and can be configured in here after <code>examples_dirs</code> and <code>gallery_dirs</code>. All paths should be relative to the <code>mkdocs.yml</code> file (which is supposed to be located at project root).</p> <p>For some general rules:</p> <ol> <li>The default matching filename pattern is <code>plot_</code>, so to have your files run, ensure the filenames are prefixed with <code>plot_</code>.</li> <li><code>__init__.py</code> files are ignored. You can change what's ignored by setting the <code>ignore_pattern</code> as per the sphinx-gallery configuration options</li> </ol> <p>You can look at the configuration used to generate this site as an example: mkdocs.yml.</p> <p>Caution</p> <p><code>mkdocs-gallery</code> currently requires that you use the <code>material</code> theme from <code>mkdocs-material</code> to render properly. You may wish to try other themes to see what is missing to support them: actually, only a few things concerning buttons and icons do not seem to currently work properly.</p> <p>Note</p> <p>The <code>search</code> plugin is not related with mkdocs-gallery. It is activated by default in mkdocs but if you edit the <code>plugins</code> configuration you have to add it explicitly again.</p> <p>Once you've done this, the corresponding gallery will be created the next time you call <code>mkdocs build</code> or <code>mkdocs serve</code>. However the gallery will not yet appear in the table of contents (mkdocs <code>nav</code>). For this you should add the generated gallery to the nav in <code>mkdocs.yml</code>:</p> <pre><code>nav:\n  - Home: index.md\n  - generated/gallery  # This node will automatically be named and have sub-nodes.\n</code></pre> <p>When the root folder or the root <code>index.md</code> of a gallery is added to the nav, it will be automatically populated with sub-nodes for all examples and subgalleries. If you prefer to select examples or subgalleries to include one by one, you may refer to any of them directly in the nav. In that case, no nav automation will be performed - just the usual explicit mkdocs nav.</p> <p>You may wish to change the gallery's names for display and still benefit from this automation:</p> <pre><code>nav:\n  - Home: index.md\n  - My Gallery: generated/gallery  # This node will automatically be named and have sub-nodes.\n</code></pre> <p>See this site's config for an example. See also mkdocs configuration for general information about the <code>mkdocs.yml</code> file.</p>"},{"location":"#b-advanced","title":"b. Advanced","text":"<p>You may wish to use the special <code>conf_script</code> option to create the base configuration using a python script, like what was done in Sphinx-gallery:</p> <pre><code>plugins:\n  - gallery:\n      conf_script: docs/gallery_conf.py\n      # ... other options can still be added here\n</code></pre> <p>The python script should be executable without error, and at the end of execution should contain a <code>conf</code> variable defined at the module level. For example this is a valid script:</p> <pre><code>from mkdocs_gallery.gen_gallery import DefaultResetArgv\n\nconf = {\n    'reset_argv': DefaultResetArgv(),\n}\n</code></pre> <p>You can set options both in the script and in the yaml. In case of duplicates, the yaml options override the script-defined ones.</p>"},{"location":"#3-add-gallery-examples","title":"3. Add gallery examples","text":"<p>Gallery examples are structured the same way as in sphinx-gallery, with two major differences: </p> <ul> <li>All comment blocks should be written using Markdown instead of rST. </li> <li>No sphinx directive is supported: all markdown directives should be supported by <code>mkdocs</code>, by one of its activated plugins or by a base markdown extension (see note below).</li> <li>All per-file and per-code block configuration options from sphinx-gallery (here, bottom) are supported, but you have to use the <code>mkdocs_gallery_[option]</code> prefix instead of <code>sphinx_gallery_[options]</code>.</li> </ul> <pre><code>examples/            # base 'Gallery of Examples' directory\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 &lt;.py files&gt;      \n\u2514\u2500\u2500 subgallery_1/     # generates the 'No image output examples' sub-gallery\n    \u251c\u2500\u2500 README.md\n    \u2514\u2500\u2500 &lt;.py files&gt;\n</code></pre>"},{"location":"#4-examples","title":"4. Examples","text":"<p>The entire original gallery of examples from sphinx-gallery is being ported here (work in progress). You may wish to check it out in order to see how each technical aspect translates in the mkdocs world.</p> <p>You can look at the configuration used to generate it here: mkdocs.yml.</p>"},{"location":"#5-feature-highlights","title":"5. Feature Highlights","text":""},{"location":"#a-mkdocs-serve-mode","title":"a. Mkdocs \"serve\" mode","text":"<p><code>mkdocs-gallery</code> supports the mkdocs dev-server <code>mkdocs serve</code> so that you can edit your gallery examples with live auto-rebuild (similar to sphinx-autobuild).</p> <p>As soon as you modify an example file, it will rebuild the documentation and notify your browser. The examples that did not change will be automatically skipped (based on md5, identical to sphinx-gallery).</p> <p>See mkdocs documentation for details.</p>"},{"location":"#b-editing-examples","title":"b. Editing Examples","text":"<p>All mkdocs-gallery generated pages have a working \"edit page\" pencil icon at the top, including gallery summary (readme) pages. This link will take you directly to the source file for easy pull requests on gallery examples !</p>"},{"location":"#c-binder","title":"c. Binder","text":"<p>Binder configuration is slightly easier than the one in sphinx-gallery (as of version 1.0.1), as 2 pieces of config are now optional:</p> <ul> <li><code>branch</code> (defaults to <code>\"gh-pages\"</code>)</li> <li><code>binderhub_url</code> (defaults to <code>\"https://mybinder.org\"</code>)</li> </ul>"},{"location":"#6-make-your-examples-shine","title":"6. Make your examples shine !","text":"<p>The following <code>mkdocs</code> plugins and extensions are automatically activated - you may therefore use them in your markdown blocks without changing your <code>mkdocs.yml</code> configuration:</p> <ul> <li> <p><code>mkdocs-material</code> mkdocs plugin: make sure you check this one out !</p> <ul> <li><code>navigation.indexes</code> in the <code>material</code> theme. This is used for the gallery readme pages to be selectible in the nav without creating an extra entry (see left pane). </li> <li>icons + emojis </li> <li>All no-conf features are there too, for example support for \\(\\LaTeX\\) using Mathjax, code blocks, Admonitions etc.</li> </ul> </li> <li> <p>markdown extensions:</p> <ul> <li><code>attr_list</code> to declare attributes such as css classes on markdown elements.</li> <li><code>admonition</code> used to add notes.</li> <li><code>pymdownx.details</code> to create foldable notes such as this one.</li> <li><code>pymdownx.highlight</code></li> <li><code>pymdownx.inlinehilite</code></li> <li><code>pymdownx.superfences</code></li> <li><code>pymdownx.snippets</code> (Warning: the base path is   a bit counter-intuitive: it is relative to <code>cwd</code>, not to the markdown file ; see the last line of this tutorial)</li> <li><code>pymdownx.emoji</code> configured with the catalog from mkdocs-material (see above)</li> </ul> </li> </ul>"},{"location":"#citing","title":"Citing","text":"<p>If <code>mkdocs-gallery</code> helps you with your research work, don't hesitate to spread the word ! For this simply use this Zenodo link  to get the proper citation entry (at the bottom right of the page, many formats available including BibTeX).</p> <p>Note: do not hesitate to cite sphinx-gallery too ! </p>"},{"location":"#see-also","title":"See Also","text":"<ul> <li><code>sphinx-gallery</code></li> <li><code>mkdocs</code></li> <li><code>mkdocs-material</code></li> <li><code>PyMdown Extensions</code></li> </ul>"},{"location":"#others","title":"Others","text":"<p>Do you like this library ? You might also like smarie's other python libraries </p>"},{"location":"#want-to-contribute","title":"Want to contribute ?","text":"<p>Details on the github page: https://github.com/smarie/mkdocs-gallery</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#090-pyvista","title":"0.9.0 - Pyvista","text":"<ul> <li>Pyvista can now be used in gallery examples as in <code>sphinx-gallery</code>. PR #91 by Louis-Pujol</li> </ul>"},{"location":"changelog/#080-mayavi","title":"0.8.0 - Mayavi","text":"<ul> <li>Mayavi can now be used in gallery examples just as in <code>sphinx-gallery</code>. PR #69 by GenevieveBuckley</li> <li>Fixed for <code>README.md</code> that contains <code>html</code> comments. Fixes #85. PR #86 by AntoineD.</li> </ul>"},{"location":"changelog/#0710-syspath-is-not-reset-between-code-blocks","title":"0.7.10 - <code>sys.path</code> is not reset between code blocks","text":"<ul> <li><code>sys.path</code> modifications now persist across blocks of an example. <code>sys.path</code> is still reset after each example. PR #82 by Louis-Pujol.</li> </ul>"},{"location":"changelog/#079-optipng-and-better-error-messages","title":"0.7.9 - <code>optipng</code> and better error messages","text":"<ul> <li>Fixed <code>AttributeError</code> when <code>optipng</code> is installed and used through the <code>compress_images</code> option. PR #77 by Samreay</li> <li>Swapped from deprecated <code>disutils.version</code> to <code>packaging.version</code>. PR #79 by Samreay</li> <li>Re-raise errors for better ExtensionError messages, so users have full details about the original problem. PR #58 by GenevieveBuckley</li> </ul>"},{"location":"changelog/#078-bugfixes","title":"0.7.8 - Bugfixes","text":"<ul> <li>Fixed <code>Plugin 'gallery' option 'binder': Sub-option 'org': Required configuration not provided.</code>. Fixes #62</li> <li>Support relative path to <code>mkdocs.yaml</code> file using <code>--config-file</code> option. Fixes #63. PR #64 by fgrbr.</li> </ul>"},{"location":"changelog/#077-bugfixes-and-new-python-versions","title":"0.7.7 - Bugfixes and new python versions","text":"<ul> <li>Official support for python 3.10 and 3.11. PR #52 by GenevieveBuckley</li> <li>Fixed <code>AttributeError: MySubConfig has no '_pre_validate'</code> with <code>mkdocs</code> version <code>1.4</code> or greater. Fixes #57</li> </ul>"},{"location":"changelog/#076-bugfixes","title":"0.7.6 - Bugfixes","text":"<ul> <li>Fixed incorrect img <code>srcset</code> paths leading to figures not being displayed in gallery examples. Fixes #47</li> <li>Fixed <code>TypeError: startswith first arg must be str or a tuple of str, not WindowsPath</code> when running with <code>mkdocs serve</code>. Fixes #45. PR #46 by mchaaler.</li> </ul>"},{"location":"changelog/#075-bugfixes","title":"0.7.5 - Bugfixes","text":"<ul> <li>Examples expected to fail are now correctly skipped in case of identical md5 hash, too. Fixes #34. PR #39 by mchaaler.</li> </ul>"},{"location":"changelog/#074-bugfixes","title":"0.7.4 - Bugfixes","text":"<ul> <li>Python scripts are now correctly skipped in case of identical md5 hash. Fixes #29. PR #27 by mchaaler.</li> <li>Fixed error when <code>edit_url</code> is set to empty to disable the \"edit page\" feature. Fixes #32. PR #27 by mchaaler.</li> </ul> <p>This release was yanked because of #34.</p>"},{"location":"changelog/#073-bugfix","title":"0.7.3 - Bugfix","text":"<ul> <li><code>matplotlib</code> was still not optional by default because of the associated <code>image_scraper</code> that was called even when not used. It is now truly optional. Fixed #24</li> </ul>"},{"location":"changelog/#072-misc-bug-fixes-and-improvements","title":"0.7.2 - Misc. bug fixes and improvements","text":"<ul> <li>Fixed <code>KeyError</code> issue when using a minimalistic configuration. Fixed #22.</li> <li><code>matplotlib</code> is now optional. Fixed #24</li> </ul>"},{"location":"changelog/#071-packaging-is-now-correct","title":"0.7.1 - Packaging is now correct","text":"<ul> <li>Fixed packaging issue: static resources were not included in wheel. Adopted <code>src/</code> layout. Fixed #19.</li> </ul>"},{"location":"changelog/#070-code-output-max-height-updated-one-example","title":"0.7.0 - Code output max height + updated one example","text":"<ul> <li>Code output now have a correct height limit. Fixed #7</li> <li>Fixed the \"Notebook Style Example\" tutorial. Fixed #17</li> </ul>"},{"location":"changelog/#060-all-examples-edit-page-link-binder-badges","title":"0.6.0 - All examples + Edit page link + Binder badges !","text":"<ul> <li>Completed the gallery of examples. Fixed #1</li> <li>Fixed HTML repr (example 2, typically used to display pandas tables). Fixed #11</li> <li>Binder badges now work correctly. Fixes #5</li> <li>\"Edit page\" links (pencil icon at the top) now work as expected: they take the user to the source python file used to generate the page. It also works for gallery readme pages ! Fixes #8</li> <li>backreferences files are now written but it is still not clear how they should be used in a mkdocs context, see #10</li> <li>Fixed most flake8 issues and warnings.</li> </ul>"},{"location":"changelog/#050-first-public-working-release","title":"0.5.0 - First public working release","text":"<p>Initial release with:</p> <ul> <li>Basic features: </li> <li>pages generation with markdown-based gallery examples. Currently only the <code>material</code> theme renders correctly</li> <li>download buttons (both on each example and on the summaries) and page header link to the downloads section</li> <li>subgalleries</li> <li>gallery synthesis with proper icons and subgalleries</li> <li>auto inclusion in the ToC (nav) with support for the section index pages feature</li> <li>working <code>mkdocs serve</code>: correctly ignoring generated files to avoid infinite build loop</li> <li>working <code>mkdocs.yml</code> configuration for most options</li> <li> <p>New option <code>conf_script</code> to configure via a script as in Sphinx-gallery.</p> </li> <li> <p>All gallery examples from Sphinx-Gallery successfully translated, in particular:</p> </li> <li> <p>LaTeX support works</p> </li> <li> <p>Refactoring:</p> </li> <li>Using pathlib all over the place</li> <li>Using f-string whenever possible</li> <li>Object-oriented approach for configuration and dir/file names used in the generated files.</li> </ul>"},{"location":"long_description/","title":"mkdocs-gallery","text":"<p>Sphinx-Gallery features for mkdocs (no Sphinx dependency !).</p> <p> </p> <p> </p> <p>Do you love Sphinx-Gallery but prefer mkdocs over Sphinx for your documentation ? <code>mkdocs-gallery</code> was written for you ;) </p> <p>It relies on mkdocs-material to get the most of mkdocs, so that your galleries look nice!</p> <p>The documentation for users is available here: https://smarie.github.io/mkdocs-gallery/</p> <p>A readme for developers is available here: https://github.com/smarie/mkdocs-gallery</p>"},{"location":"generated/gallery/","title":"Gallery of examples","text":""},{"location":"generated/gallery/#gallery-of-examples","title":"Gallery of Examples","text":"<p>This page consists of the 'General example' gallery and a sub-gallery, 'No image output examples'. This sub-gallery is generated from a sub-directory within the general examples directory. The file structure of this gallery looks like this:</p> <pre><code>examples/           # base 'Gallery of Examples' directory\n\u251c\u2500\u2500 README.txt\n\u251c\u2500\u2500 &lt;.py files&gt;\n\u2514\u2500\u2500 no_output/      # generates the 'No image output examples' sub-gallery\n    \u251c\u2500\u2500 README.txt\n    \u2514\u2500\u2500 &lt;.py files&gt;\n</code></pre>"},{"location":"generated/gallery/#general-examples","title":"General examples","text":"<p>This gallery consists of introductory examples and examples demonstrating specific features of Mkdocs-Gallery.</p> <p> Local module </p> <p> Introductory example - Plotting sin </p> <p> Plotting the exponential function </p> <p> Seaborn example </p> <p> Capturing output representations </p> <p> Choosing the thumbnail figure </p> <p> Providing a figure for the thumbnail image </p> <p> Using Unicode everywhere \ud83e\udd17 </p> <p> Identifying function names in a script </p> <p> Using `sys.argv` in examples </p> <p> Matplotlib animation support </p> <p> Example with the plotly graphing library </p> <p> Example with the mayavi graphing library </p> <p> Example with the pyvista 3d plotting library </p>"},{"location":"generated/gallery/#no-image-output-examples","title":"No image output examples","text":"<p>This section gathers examples which don't produce any figures. Some examples only output to standard output, others demonstrate how Mkdocs-Gallery handles examples with errors.</p> <p> A short Python script </p> <p> Example that fails to execute </p> <p> Constrained Text output frame </p> <p> SyntaxError </p> <p> Download all examples in Python source code: gallery_python.zip</p> <p> Download all examples in Jupyter notebooks: gallery_jupyter.zip</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/local_module/","title":"Local module","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/local_module/#local-module","title":"Local module","text":"<p>This example demonstrates how local modules can be imported. This module is imported in the example Plotting the exponential function.</p> <pre><code>N = 100\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.000 seconds)</p> <p></p> <p> Download Python source code: local_module.py</p> <p> Download Jupyter notebook: local_module.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/mg_execution_times/","title":"Computation times","text":"<p>00:16.230 total execution time for generated_gallery files:</p> <p>+----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_11_pyvista (docs/examples/plot_11_pyvista.py)                                     | 00:06.039 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_08_animations (docs/examples/plot_08_animations.py)                            | 00:03.047 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_10_mayavi (docs/examples/plot_10_mayavi.py)                                        | 00:01.679 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_00_sin (docs/examples/plot_00_sin.py)                                                 | 00:01.594 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_02_seaborn (docs/examples/plot_02_seaborn.py)                                     | 00:01.149 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_09_plotly (docs/examples/plot_09_plotly.py)                                        | 00:00.508 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_03_capture_repr (docs/examples/plot_03_capture_repr.py)                      | 00:00.495 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_04b_provide_thumbnail (docs/examples/plot_04b_provide_thumbnail.py)    | 00:00.435 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_01_exp (docs/examples/plot_01_exp.py)                                                 | 00:00.409 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_06_function_identifier (docs/examples/plot_06_function_identifier.py) | 00:00.386 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_04_choose_thumbnail (docs/examples/plot_04_choose_thumbnail.py)          | 00:00.270 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_05_unicode_everywhere (docs/examples/plot_05_unicode_everywhere.py)    | 00:00.218 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | plot_07_sys_argv (docs/examples/plot_07_sys_argv.py)                                  | 00:00.002 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+ | local_module (docs/examples/local_module.py)                                              | 00:00.000 | 0.0 MB | +----------------------------------------------------------------------------------------------------------------+-----------+--------+</p>"},{"location":"generated/gallery/plot_00_sin/","title":"Introductory example - Plotting sin","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_00_sin/#introductory-example-plotting-sin","title":"Introductory example - Plotting sin","text":"<p>This is a general example demonstrating a Matplotlib plot output, embedded Markdown, the use of math notation and cross-linking to other examples. It would be useful to compare the  source Python file with the output below.</p> <p>Source files for gallery examples should start with a triple-quoted header docstring. Anything before the docstring is ignored by Mkdocs-Gallery and will not appear in the rendered output, nor will it be executed. This docstring requires a Markdown header, which is used as the title of the example and to correctly build cross-referencing links.</p> <p>Code and embedded Markdown text blocks follow the docstring. The first block immediately after the docstring is deemed a code block, by default, unless you specify it to be a text block using a line of <code>#</code>'s or <code>#%%</code> (see below). All code blocks get executed by Mkdocs-Gallery and any output, including plots will be captured. Typically, code and text blocks are interspersed to provide narrative explanations of what the code is doing or interpretations of code output.</p> <p>Mathematical expressions can be included as LaTeX, and will be rendered with MathJax. See mkdocs-material for configuration of your <code>mkdocs.yml</code> as well as for syntax details. For example, we are about to plot the following function:</p> \\[ x \\rightarrow \\sin(x) \\] <p>Here the function \\(\\sin\\) is evaluated at each point the variable \\(x\\) is defined. When including LaTeX in a Python string, ensure that you escape the backslashes or use a raw docstring. You do not need to do this in text blocks (see below).</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.xlabel(r'$x$')\nplt.ylabel(r'$\\sin(x)$')\n# To avoid matplotlib text output\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_00_sin.py:51: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre> <p>To include embedded Markdown, use a line of &gt;= 20 <code>#</code>'s or <code>#%%</code> between your Markdown and your code (see syntax). This separates your example into distinct text and code blocks. You can continue writing code below the embedded Markdown text block:</p> <pre><code>print('This example shows a sin plot!')\n</code></pre> <p>Out:</p> <pre><code>This example shows a sin plot!\n</code></pre> <p>LaTeX syntax in the text blocks does not require backslashes to be escaped:</p> \\[ \\sin \\]"},{"location":"generated/gallery/plot_00_sin/#cross-referencing","title":"Cross referencing","text":"<p>You can refer to an example from any part of the documentation, including from other examples. However as opposed to what happens in Sphinx, there is no possibility to create unique identifiers in MkDocs.</p> <p>So you should use relative paths. First, let's note that the markdown for the current file is located at <code>docs/generated/gallery/plot_1_sin.md</code>. This is because the configuration for this gallery in <code>mkdocs.yml</code> states that the <code>examples/</code> gallery should be generated in the <code>generated/gallery</code> folder (see Configuration).</p> <p>Below, the example we want to cross-reference is the 'SyntaxError' example, located in the <code>no_output</code> subgallery of the <code>examples</code> gallery. The associated generated file is <code>docs/generated/gallery/no_output/plot_syntaxerror.md</code>.</p> <pre><code>docs/\n\u2514\u2500\u2500 generated/\n    \u2514\u2500\u2500 gallery/\n        \u251c\u2500\u2500 no_output/\n        \u2502   \u251c\u2500\u2500 plot_syntaxerror.md  # example to reference\n        \u2502   \u2514\u2500\u2500 ...\n        \u251c\u2500\u2500 plot_1_sin.md            # current example\n        \u2514\u2500\u2500 ...\n</code></pre> <p>We can therefore cross-link to the example using <code>[SyntaxError](./no_output/plot_syntaxerror.md)</code>: SyntaxError.</p> <p>Of course as for normal documents, we can leverage plugins (e.g. mkdocs-material) and extensions. So here we use admonitions: to create a nice \"see also\" note:</p> <p>See also</p> <p>See SyntaxError for an example with an error.</p> <p>Total running time of the script: ( 0 minutes  1.594 seconds)</p> <p></p> <p> Download Python source code: plot_00_sin.py</p> <p> Download Jupyter notebook: plot_00_sin.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_01_exp/","title":"Plotting the exponential function","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_01_exp/#plotting-the-exponential-function","title":"Plotting the exponential function","text":"<p>This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable <code>N</code> from the example 'Local module' (file <code>local_module.py</code>) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block.</p> <p>Out:</p> <pre><code>/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_01_exp.py:40: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre> <p></p> <pre><code># Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# You can use modules local to the example being run, here we import\n# N from local_module\nfrom local_module import N  # = 100\n\n\ndef main():\n    x = np.linspace(-1, 2, N)\n    y = np.exp(x)\n\n    plt.figure()\n    plt.plot(x, y)\n    plt.xlabel('$x$')\n    plt.ylabel('$\\exp(x)$')\n    plt.title('Exponential function')\n\n    plt.figure()\n    plt.plot(x, -np.exp(-x))\n    plt.xlabel('$x$')\n    plt.ylabel('$-\\exp(-x)$')\n    plt.title('Negative exponential\\nfunction')\n    # To avoid matplotlib text output\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.409 seconds)</p> <p></p> <p> Download Python source code: plot_01_exp.py</p> <p> Download Jupyter notebook: plot_01_exp.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_02_seaborn/","title":"Seaborn example","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_02_seaborn/#seaborn-example","title":"Seaborn example","text":"<p>This example demonstrates a Seaborn plot. Figures produced Matplotlib and by any package that is based on Matplotlib (e.g., Seaborn), will be captured by default. See Image scrapers for details.</p> <p></p> <p>Out:</p> <pre><code>/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_02_seaborn.py:36: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre> <p></p> <pre><code># Author: Michael Waskom &amp; Lucy Liu\n# License: BSD 3 clause\n\nfrom __future__ import division, absolute_import, print_function\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Enforce the use of default set style\n\n# Create a noisy periodic dataset\ny_array = np.array([])\nx_array = np.array([])\nrs = np.random.RandomState(8)\nfor _ in range(15):\n    x = np.linspace(0, 30 / 2, 30)\n    y = np.sin(x) + rs.normal(0, 1.5) + rs.normal(0, .3, 30)\n    y_array = np.append(y_array, y)\n    x_array = np.append(x_array, x)\n\n# Plot the average over replicates with confidence interval\nsns.lineplot(y=y_array, x=x_array)\n# to avoid text output\nplt.show()\n</code></pre> <p>Total running time of the script: ( 0 minutes  1.149 seconds)</p> <p></p> <p> Download Python source code: plot_02_seaborn.py</p> <p> Download Jupyter notebook: plot_02_seaborn.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_03_capture_repr/","title":"Capturing output representations","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_03_capture_repr/#capturing-output-representations","title":"Capturing output representations","text":"<p>This example demonstrates how the <code>capture_repr</code> configuration option (Controlling what output is captured)  works. The default <code>capture_repr</code> setting is <code>('_repr_html_', '__repr__')</code> and was used to build this Mkdocs-Gallery documentation. The output that is captured with this setting is demonstrated in this example. Differences in outputs that would be captured with other <code>capture_repr</code> settings are also explained.</p> <p>Nothing is captured for the code block below because no data is directed to standard output and the last statement is an assignment, not an expression.</p> <pre><code># example 1\na = 2\nb = 10\n</code></pre> <p>If you did wish to capture the value of <code>b</code>, you would need to use:</p> <pre><code># example 2\na = 2\nb = 10\nb   # this is an expression\n</code></pre> <p>Out:</p> <pre><code>10\n</code></pre> <p>Mkdocs-Gallery first attempts to capture the <code>_repr_html_</code> of <code>b</code> as this is the first 'representation' method in the <code>capture_repr</code> tuple. As this method does not exist for <code>b</code>, Mkdocs-Gallery moves on and tries to capture the <code>__repr__</code> method, which is second in the tuple. This does exist for <code>b</code> so it is captured and the output is seen above.</p> <p>A pandas dataframe is used in the code block below to provide an example of an expression with a <code>_repr_html_</code> method.</p> <pre><code># example 3\nimport pandas as pd\n\ndf = pd.DataFrame(data = {'col1': [1, 2], 'col2': [3, 4]})\ndf\n</code></pre> col1 col2 0 1 3 1 2 4 <p>The pandas dataframe <code>df</code> has both a <code>__repr__</code> and <code>_repr_html_</code> method. As <code>_repr_html_</code> appears first in the <code>capture_repr</code> tuple, the <code>_repr_html_</code> is captured in preference to <code>__repr__</code>.</p> <p>Statsmodels tables should also be styled appropriately:</p> <pre><code># example 4\nimport numpy as np\nimport statsmodels.iolib.table\nstatsmodels.iolib.table.SimpleTable(np.zeros((3, 3)))\n</code></pre> 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 <p>For the example below, there is data directed to standard output and the last statement is an expression.</p> <pre><code># example 5\nprint('Hello world')\na + b\n</code></pre> <p>Out:</p> <pre><code>Hello world\n\n12\n</code></pre> <p><code>print()</code> outputs to standard output, which is always captured. The string <code>'Hello world'</code> is thus captured. A 'representation' of the last expression is also captured. Again, since this expression <code>a + b</code> does not have a <code>_repr_html_</code> method, the <code>__repr__</code> method is captured.</p>"},{"location":"generated/gallery/plot_03_capture_repr/#matplotlib-output","title":"Matplotlib output","text":"<p>Matplotlib function calls generally return a Matplotlib object as well as outputting the figure. For code blocks where the last statement is a Matplotlib expression, a 'representation' of the object will be captured, as well as the plot. This is because Matplotlib objects have a <code>__repr__</code> method and our <code>capture_repr</code> tuple contains <code>__repr__</code>. Note that Matplotlib objects also have a <code>__str__</code> method.</p> <p>In the example below, <code>matplotlib.pyplot.plot()</code> returns a list of <code>Line2D</code> objects representing the plotted data and the <code>__repr__</code> of the list is captured as well as the figure:</p> <pre><code>import matplotlib.pyplot as plt\n\nplt.plot([1,2,3])\n</code></pre> <p></p> <p>Out:</p> <pre><code>[&lt;matplotlib.lines.Line2D object at 0x7fd5fc9a68e0&gt;]\n</code></pre> <p>To avoid capturing the text representation, you can assign the last Matplotlib expression to a temporary variable:</p> <pre><code>_ = plt.plot([1,2,3])\n</code></pre> <p></p> <p>Alternatively, you can add <code>plt.show()</code>, which does not return anything, to the end of the code block:</p> <pre><code>plt.plot([1,2,3])\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_03_capture_repr.py:102: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre>"},{"location":"generated/gallery/plot_03_capture_repr/#the-capture_repr-configuration","title":"The <code>capture_repr</code> configuration","text":"<p>The <code>capture_repr</code> configuration is <code>('_repr_html_', '__repr__')</code> by default. This directs Mkdocs-Gallery to capture 'representations' of the last statement of a code block, if it is an expression. Mkdocs-Gallery does this according to the order 'representations' appear in the tuple.</p> <p>With the default <code>capture_repr</code> setting, <code>_repr_html_</code> is attempted to be captured first. If this method does not exist, the <code>__repr__</code> method would be captured. If the <code>__repr__</code> also does not exist (unlikely for non-user defined objects), nothing would be captured. For example, if the the configuration was set to <code>'capture_repr': ('_repr_html_')</code> nothing would be captured for example 2 as <code>b</code> does not have a <code>_repr_html_</code>. You can change the 'representations' in the <code>capture_repr</code> tuple to finely tune what is captured in your example <code>.py</code> files.</p> <p>To only capture data directed to standard output you can set <code>capture_repr</code> to be an empty tuple: <code>capture_repr: ()</code>. With this setting, only data directed to standard output is captured. For the examples above, output would only be captured for example 4. Although the last statement is an expression for examples 2, 3 and 4 no 'representation' of the last expression would be output. You would need to add <code>print()</code> to the last expression to capture a 'representation' of it.</p> <p>The empty tuple setting imitates the behaviour of Sphinx-Gallery prior to v0.5.0, when this configuration was introduced.</p> <p>Total running time of the script: ( 0 minutes  0.495 seconds)</p> <p></p> <p> Download Python source code: plot_03_capture_repr.py</p> <p> Download Jupyter notebook: plot_03_capture_repr.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_04_choose_thumbnail/","title":"Choosing the thumbnail figure","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_04_choose_thumbnail/#choosing-the-thumbnail-figure","title":"Choosing the thumbnail figure","text":"<p>This example demonstrates how to choose the figure that is displayed as the thumbnail, if the example generates more than one figure. This is done by specifying the keyword-value pair <code>mkdocs_gallery_thumbnail_number = &lt;fig number&gt;</code> as a comment somewhere below the docstring in the example file. In this example, we specify that we wish for the second figure to be the thumbnail.</p> <p>Out:</p> <pre><code>/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_04_choose_thumbnail.py:38: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre> <p></p> <pre><code># Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef main():\n    x = np.linspace(-1, 2, 100)\n    y = np.exp(x)\n\n    plt.figure()\n    plt.plot(x, y)\n    plt.xlabel('$x$')\n    plt.ylabel('$\\exp(x)$')\n\n    # The next line sets the thumbnail for the second figure in the gallery\n    # (plot with negative exponential in orange)\n    # mkdocs_gallery_thumbnail_number = 2\n    plt.figure()\n    plt.plot(x, -np.exp(-x), color='orange', linewidth=4)\n    plt.xlabel('$x$')\n    plt.ylabel('$-\\exp(-x)$')\n    # To avoid matplotlib text output\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.270 seconds)</p> <p></p> <p> Download Python source code: plot_04_choose_thumbnail.py</p> <p> Download Jupyter notebook: plot_04_choose_thumbnail.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_04b_provide_thumbnail/","title":"Providing a figure for the thumbnail image","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_04b_provide_thumbnail/#providing-a-figure-for-the-thumbnail-image","title":"Providing a figure for the thumbnail image","text":"<p>This example demonstrates how to provide a figure that is displayed as the thumbnail. This is done by specifying the keyword-value pair <code>mkdocs_gallery_thumbnail_path = 'fig path'</code> as a comment somewhere below the docstring in the example file. In this example, we specify that we wish the figure <code>demo.png</code> in the folder <code>_static</code> to be used for the thumbnail.</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n# mkdocs_gallery_thumbnail_path = '_static/demo.png'\n</code></pre> <pre><code>x = np.linspace(0, 4*np.pi, 301)\ny1 = np.sin(x)\ny2 = np.cos(x)\n</code></pre>"},{"location":"generated/gallery/plot_04b_provide_thumbnail/#plot-1","title":"Plot 1","text":"<pre><code>plt.figure()\nplt.plot(x, y1, label='sin')\nplt.plot(x, y2, label='cos')\nplt.legend()\nplt.show()\n</code></pre> <p>Out:</p> <pre><code>/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_04b_provide_thumbnail.py:30: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre>"},{"location":"generated/gallery/plot_04b_provide_thumbnail/#plot-2","title":"Plot 2","text":"<pre><code>plt.figure()\nplt.plot(x, y1, label='sin')\nplt.plot(x, y2, label='cos')\nplt.legend()\nplt.xscale('log')\nplt.yscale('log')\nplt.show()\n</code></pre> <p>Out:</p> <pre><code>/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_04b_provide_thumbnail.py:42: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.435 seconds)</p> <p></p> <p> Download Python source code: plot_04b_provide_thumbnail.py</p> <p> Download Jupyter notebook: plot_04b_provide_thumbnail.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_05_unicode_everywhere/","title":"Using Unicode everywhere \ud83e\udd17","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_05_unicode_everywhere/#using-unicode-everywhere","title":"Using Unicode everywhere \ud83e\udd17","text":"<p>This example demonstrates how to include non-ASCII characters, mostly emoji \ud83c\udf89 to stress test the build and test environments that parse the example files.</p> <pre><code>from __future__ import unicode_literals\n\n# \ud83c\udf89 \ud83d\udc4d\n# Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.rcParams['font.size'] = 20\nplt.rcParams[\"font.monospace\"] = [\"DejaVu Sans Mono\"]\nplt.rcParams[\"font.family\"] = \"monospace\"\n\nplt.figure()\nx = np.random.randn(100) * 2 + 1\ny = np.random.randn(100) * 6 + 3\ns = np.random.rand(*x.shape) * 800 + 500\nplt.scatter(x, y, s, marker=r'$\\oint$')\nx = np.random.randn(60) * 7 - 4\ny = np.random.randn(60) * 3 - 2\ns = s[:x.size]\nplt.scatter(x, y, s, alpha=0.5, c='g', marker=r'$\\clubsuit$')\nplt.xlabel('\u21d2')\nplt.ylabel('\u21d2')\nplt.title('\u2672' * 10)\nprint('Std out capture \ud83d\ude0e')\n# To avoid matplotlib text output\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>Std out capture \ud83d\ude0e\n/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_05_unicode_everywhere.py:36: UserWarning:\n\nFigureCanvasAgg is non-interactive, and thus cannot be shown\n</code></pre> <p>Debug fonts</p> <pre><code>print(plt.rcParams)\n</code></pre> <p>Out:</p> <pre><code>_internal.classic_mode: False\nagg.path.chunksize: 0\nanimation.bitrate: -1\nanimation.codec: h264\nanimation.convert_args: ['-layers', 'OptimizePlus']\nanimation.convert_path: convert\nanimation.embed_limit: 20.0\nanimation.ffmpeg_args: []\nanimation.ffmpeg_path: ffmpeg\nanimation.frame_format: png\nanimation.html: none\nanimation.writer: ffmpeg\naxes.autolimit_mode: data\naxes.axisbelow: line\naxes.edgecolor: black\naxes.facecolor: white\naxes.formatter.limits: [-5, 6]\naxes.formatter.min_exponent: 0\naxes.formatter.offset_threshold: 4\naxes.formatter.use_locale: False\naxes.formatter.use_mathtext: False\naxes.formatter.useoffset: True\naxes.grid: False\naxes.grid.axis: both\naxes.grid.which: major\naxes.labelcolor: black\naxes.labelpad: 4.0\naxes.labelsize: medium\naxes.labelweight: normal\naxes.linewidth: 0.8\naxes.prop_cycle: cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])\naxes.spines.bottom: True\naxes.spines.left: True\naxes.spines.right: True\naxes.spines.top: True\naxes.titlecolor: auto\naxes.titlelocation: center\naxes.titlepad: 6.0\naxes.titlesize: large\naxes.titleweight: normal\naxes.titley: None\naxes.unicode_minus: True\naxes.xmargin: 0.05\naxes.ymargin: 0.05\naxes.zmargin: 0.05\naxes3d.grid: True\naxes3d.xaxis.panecolor: (0.95, 0.95, 0.95, 0.5)\naxes3d.yaxis.panecolor: (0.9, 0.9, 0.9, 0.5)\naxes3d.zaxis.panecolor: (0.925, 0.925, 0.925, 0.5)\nbackend: agg\nbackend_fallback: False\nboxplot.bootstrap: None\nboxplot.boxprops.color: black\nboxplot.boxprops.linestyle: -\nboxplot.boxprops.linewidth: 1.0\nboxplot.capprops.color: black\nboxplot.capprops.linestyle: -\nboxplot.capprops.linewidth: 1.0\nboxplot.flierprops.color: black\nboxplot.flierprops.linestyle: none\nboxplot.flierprops.linewidth: 1.0\nboxplot.flierprops.marker: o\nboxplot.flierprops.markeredgecolor: black\nboxplot.flierprops.markeredgewidth: 1.0\nboxplot.flierprops.markerfacecolor: none\nboxplot.flierprops.markersize: 6.0\nboxplot.meanline: False\nboxplot.meanprops.color: C2\nboxplot.meanprops.linestyle: --\nboxplot.meanprops.linewidth: 1.0\nboxplot.meanprops.marker: ^\nboxplot.meanprops.markeredgecolor: C2\nboxplot.meanprops.markerfacecolor: C2\nboxplot.meanprops.markersize: 6.0\nboxplot.medianprops.color: C1\nboxplot.medianprops.linestyle: -\nboxplot.medianprops.linewidth: 1.0\nboxplot.notch: False\nboxplot.patchartist: False\nboxplot.showbox: True\nboxplot.showcaps: True\nboxplot.showfliers: True\nboxplot.showmeans: False\nboxplot.vertical: True\nboxplot.whiskerprops.color: black\nboxplot.whiskerprops.linestyle: -\nboxplot.whiskerprops.linewidth: 1.0\nboxplot.whiskers: 1.5\ncontour.algorithm: mpl2014\ncontour.corner_mask: True\ncontour.linewidth: None\ncontour.negative_linestyle: dashed\ndate.autoformatter.day: %Y-%m-%d\ndate.autoformatter.hour: %m-%d %H\ndate.autoformatter.microsecond: %M:%S.%f\ndate.autoformatter.minute: %d %H:%M\ndate.autoformatter.month: %Y-%m\ndate.autoformatter.second: %H:%M:%S\ndate.autoformatter.year: %Y\ndate.converter: auto\ndate.epoch: 1970-01-01T00:00:00\ndate.interval_multiples: True\ndocstring.hardcopy: False\nerrorbar.capsize: 0.0\nfigure.autolayout: False\nfigure.constrained_layout.h_pad: 0.04167\nfigure.constrained_layout.hspace: 0.02\nfigure.constrained_layout.use: False\nfigure.constrained_layout.w_pad: 0.04167\nfigure.constrained_layout.wspace: 0.02\nfigure.dpi: 100.0\nfigure.edgecolor: white\nfigure.facecolor: white\nfigure.figsize: [6.4, 4.8]\nfigure.frameon: True\nfigure.hooks: []\nfigure.labelsize: large\nfigure.labelweight: normal\nfigure.max_open_warning: 20\nfigure.raise_window: True\nfigure.subplot.bottom: 0.11\nfigure.subplot.hspace: 0.2\nfigure.subplot.left: 0.125\nfigure.subplot.right: 0.9\nfigure.subplot.top: 0.88\nfigure.subplot.wspace: 0.2\nfigure.titlesize: large\nfigure.titleweight: normal\nfont.cursive: ['Apple Chancery', 'Textile', 'Zapf Chancery', 'Sand', 'Script MT', 'Felipa', 'Comic Neue', 'Comic Sans MS', 'cursive']\nfont.family: ['monospace']\nfont.fantasy: ['Chicago', 'Charcoal', 'Impact', 'Western', 'xkcd script', 'fantasy']\nfont.monospace: ['DejaVu Sans Mono']\nfont.sans-serif: ['DejaVu Sans', 'Bitstream Vera Sans', 'Computer Modern Sans Serif', 'Lucida Grande', 'Verdana', 'Geneva', 'Lucid', 'Arial', 'Helvetica', 'Avant Garde', 'sans-serif']\nfont.serif: ['DejaVu Serif', 'Bitstream Vera Serif', 'Computer Modern Roman', 'New Century Schoolbook', 'Century Schoolbook L', 'Utopia', 'ITC Bookman', 'Bookman', 'Nimbus Roman No9 L', 'Times New Roman', 'Times', 'Palatino', 'Charter', 'serif']\nfont.size: 20.0\nfont.stretch: normal\nfont.style: normal\nfont.variant: normal\nfont.weight: normal\ngrid.alpha: 1.0\ngrid.color: #b0b0b0\ngrid.linestyle: -\ngrid.linewidth: 0.8\nhatch.color: black\nhatch.linewidth: 1.0\nhist.bins: 10\nimage.aspect: equal\nimage.cmap: viridis\nimage.composite_image: True\nimage.interpolation: antialiased\nimage.lut: 256\nimage.origin: upper\nimage.resample: True\ninteractive: False\nkeymap.back: ['left', 'c', 'backspace', 'MouseButton.BACK']\nkeymap.copy: ['ctrl+c', 'cmd+c']\nkeymap.forward: ['right', 'v', 'MouseButton.FORWARD']\nkeymap.fullscreen: ['f', 'ctrl+f']\nkeymap.grid: ['g']\nkeymap.grid_minor: ['G']\nkeymap.help: ['f1']\nkeymap.home: ['h', 'r', 'home']\nkeymap.pan: ['p']\nkeymap.quit: ['ctrl+w', 'cmd+w', 'q']\nkeymap.quit_all: []\nkeymap.save: ['s', 'ctrl+s']\nkeymap.xscale: ['k', 'L']\nkeymap.yscale: ['l']\nkeymap.zoom: ['o']\nlegend.borderaxespad: 0.5\nlegend.borderpad: 0.4\nlegend.columnspacing: 2.0\nlegend.edgecolor: 0.8\nlegend.facecolor: inherit\nlegend.fancybox: True\nlegend.fontsize: medium\nlegend.framealpha: 0.8\nlegend.frameon: True\nlegend.handleheight: 0.7\nlegend.handlelength: 2.0\nlegend.handletextpad: 0.8\nlegend.labelcolor: None\nlegend.labelspacing: 0.5\nlegend.loc: best\nlegend.markerscale: 1.0\nlegend.numpoints: 1\nlegend.scatterpoints: 1\nlegend.shadow: False\nlegend.title_fontsize: None\nlines.antialiased: True\nlines.color: C0\nlines.dash_capstyle: butt\nlines.dash_joinstyle: round\nlines.dashdot_pattern: [6.4, 1.6, 1.0, 1.6]\nlines.dashed_pattern: [3.7, 1.6]\nlines.dotted_pattern: [1.0, 1.65]\nlines.linestyle: -\nlines.linewidth: 1.5\nlines.marker: None\nlines.markeredgecolor: auto\nlines.markeredgewidth: 1.0\nlines.markerfacecolor: auto\nlines.markersize: 6.0\nlines.scale_dashes: True\nlines.solid_capstyle: projecting\nlines.solid_joinstyle: round\nmacosx.window_mode: system\nmarkers.fillstyle: full\nmathtext.bf: sans:bold\nmathtext.bfit: sans:italic:bold\nmathtext.cal: cursive\nmathtext.default: it\nmathtext.fallback: cm\nmathtext.fontset: dejavusans\nmathtext.it: sans:italic\nmathtext.rm: sans\nmathtext.sf: sans\nmathtext.tt: monospace\npatch.antialiased: True\npatch.edgecolor: black\npatch.facecolor: C0\npatch.force_edgecolor: False\npatch.linewidth: 1.0\npath.effects: []\npath.simplify: True\npath.simplify_threshold: 0.111111111111\npath.sketch: None\npath.snap: True\npcolor.shading: auto\npcolormesh.snap: True\npdf.compression: 6\npdf.fonttype: 3\npdf.inheritcolor: False\npdf.use14corefonts: False\npgf.preamble: \npgf.rcfonts: True\npgf.texsystem: xelatex\npolaraxes.grid: True\nps.distiller.res: 6000\nps.fonttype: 3\nps.papersize: letter\nps.useafm: False\nps.usedistiller: None\nsavefig.bbox: None\nsavefig.directory: ~\nsavefig.dpi: figure\nsavefig.edgecolor: auto\nsavefig.facecolor: auto\nsavefig.format: png\nsavefig.orientation: portrait\nsavefig.pad_inches: 0.1\nsavefig.transparent: False\nscatter.edgecolors: face\nscatter.marker: o\nsvg.fonttype: path\nsvg.hashsalt: None\nsvg.image_inline: True\ntext.antialiased: True\ntext.color: black\ntext.hinting: force_autohint\ntext.hinting_factor: 8\ntext.kerning_factor: 0\ntext.latex.preamble: \ntext.parse_math: True\ntext.usetex: False\ntimezone: UTC\ntk.window_focus: False\ntoolbar: toolbar2\nwebagg.address: 127.0.0.1\nwebagg.open_in_browser: True\nwebagg.port: 8988\nwebagg.port_retries: 50\nxaxis.labellocation: center\nxtick.alignment: center\nxtick.bottom: True\nxtick.color: black\nxtick.direction: out\nxtick.labelbottom: True\nxtick.labelcolor: inherit\nxtick.labelsize: medium\nxtick.labeltop: False\nxtick.major.bottom: True\nxtick.major.pad: 3.5\nxtick.major.size: 3.5\nxtick.major.top: True\nxtick.major.width: 0.8\nxtick.minor.bottom: True\nxtick.minor.ndivs: auto\nxtick.minor.pad: 3.4\nxtick.minor.size: 2.0\nxtick.minor.top: True\nxtick.minor.visible: False\nxtick.minor.width: 0.6\nxtick.top: False\nyaxis.labellocation: center\nytick.alignment: center_baseline\nytick.color: black\nytick.direction: out\nytick.labelcolor: inherit\nytick.labelleft: True\nytick.labelright: False\nytick.labelsize: medium\nytick.left: True\nytick.major.left: True\nytick.major.pad: 3.5\nytick.major.right: True\nytick.major.size: 3.5\nytick.major.width: 0.8\nytick.minor.left: True\nytick.minor.ndivs: auto\nytick.minor.pad: 3.4\nytick.minor.right: True\nytick.minor.size: 2.0\nytick.minor.visible: False\nytick.minor.width: 0.6\nytick.right: False\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.218 seconds)</p> <p></p> <p> Download Python source code: plot_05_unicode_everywhere.py</p> <p> Download Jupyter notebook: plot_05_unicode_everywhere.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_06_function_identifier/","title":"Identifying function names in a script","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_06_function_identifier/#identifying-function-names-in-a-script","title":"Identifying function names in a script","text":"<p>Work in progress</p> <p>This feature has not been fully ported to mkdocs, see #10</p> <p>This demonstrates how Mkdocs-Gallery identifies function names to figure out which functions are called in the script and to which module do they belong.</p> <pre><code># Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\n\nimport os  # noqa, analysis:ignore\nimport matplotlib.pyplot as plt\nfrom mkdocs_gallery.backreferences import identify_names\nfrom mkdocs_gallery.py_source_parser import split_code_and_text_blocks\n\nfilename = os.__file__.replace('.pyc', '.py')\n_, script_blocks = split_code_and_text_blocks(filename)\nnames = identify_names(script_blocks)\nfigheight = len(names) + .5\n\nfontsize = 12.5\n</code></pre> <p>Mkdocs-Gallery examines both the executed code itself, as well as the documentation blocks (such as this one, or the top-level one), to find backreferences. This means that by writing <code>numpy.sin</code> and <code>numpy.exp</code> here, a backreference will be created even though they are not explicitly used in the code. This is useful in particular when functions return classes -- if you add them to the documented blocks of examples that use them, they will be shown in the backreferences.</p> <p>Also note that global variables of the script have intersphinx references added to them automatically (e.g., <code>fig</code> and <code>fig.text</code> below).</p> <pre><code>fig = plt.figure(figsize=(7.5, 8))\n\nfor i, (name, obj) in enumerate(names.items()):\n    fig.text(0.55, (float(len(names)) - 0.5 - i) / figheight,\n             name,\n             ha=\"right\",\n             size=fontsize,\n             transform=fig.transFigure,\n             bbox=dict(boxstyle='square', fc=\"w\", ec=\"k\"))\n    fig.text(0.6, (float(len(names)) - 0.5 - i) / figheight,\n             obj[0][\"module\"],\n             ha=\"left\",\n             size=fontsize,\n             transform=fig.transFigure,\n             bbox=dict(boxstyle='larrow,pad=0.1', fc=\"w\", ec=\"k\"))\n\nplt.draw()\n</code></pre> <p></p> <p>Total running time of the script: ( 0 minutes  0.386 seconds)</p> <p></p> <p> Download Python source code: plot_06_function_identifier.py</p> <p> Download Jupyter notebook: plot_06_function_identifier.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_07_sys_argv/","title":"Using `sys.argv` in examples","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_07_sys_argv/#using-sysargv-in-examples","title":"Using <code>sys.argv</code> in examples","text":"<p>This example demonstrates the use of <code>sys.argv</code> in example <code>.py</code> files.</p> <p>By default, all example <code>.py</code> files will be run by Mkdocs-Gallery without any arguments. Notice below that <code>sys.argv</code> is a list consisting of only the file name. Further, any arguments added will take on the default value.</p> <p>This behavior can be changed by using the <code>reset_argv</code> option in the sphinx configuration, see Passing command line arguments to example scripts.</p> <p>Out:</p> <pre><code>sys.argv: ['/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/plot_07_sys_argv.py']\nparsed args: Namespace(option='default')\n</code></pre> <p></p> <pre><code>import argparse\nimport sys\n\nparser = argparse.ArgumentParser(description='Toy parser')\nparser.add_argument('--option', default='default',\n                    help='a dummy optional argument')\nprint('sys.argv:', sys.argv)\nprint('parsed args:', parser.parse_args())\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.002 seconds)</p> <p></p> <p> Download Python source code: plot_07_sys_argv.py</p> <p> Download Jupyter notebook: plot_07_sys_argv.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_08_animations/","title":"Matplotlib animation support","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_08_animations/#matplotlib-animation-support","title":"Matplotlib animation support","text":"<p>Show a Matplotlib animation, which should end up nicely embedded below.</p> <p>In order to enable support for animations <code>'matplotlib_animations'</code> must be set to <code>True</code> in the sphinx gallery configuration.</p> Once Loop Reflect <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\n# Adapted from\n# https://matplotlib.org/gallery/animation/basic_example.html\n\n\ndef _update_line(num):\n    line.set_data(data[..., :num])\n    return line,\n\n\nfig, ax = plt.subplots()\ndata = np.random.RandomState(0).rand(2, 25)\nline, = ax.plot([], [], 'r-')\nax.set(xlim=(0, 1), ylim=(0, 1))\nani = animation.FuncAnimation(fig, _update_line, 25, interval=100, blit=True)\n</code></pre> <p>Total running time of the script: ( 0 minutes  3.047 seconds)</p> <p></p> <p> Download Python source code: plot_08_animations.py</p> <p> Download Jupyter notebook: plot_08_animations.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_09_plotly/","title":"Example with the plotly graphing library","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_09_plotly/#example-with-the-plotly-graphing-library","title":"Example with the plotly graphing library","text":"<p>Mkdocs-Gallery supports examples made with the plotly library. Mkdocs-Gallery is able to capture the <code>_repr_html_</code> of plotly figure objects (see Controlling what output is captured). To display the figure, the last line in your code block should therefore be the plotly figure object.</p> <p>In order to use plotly, the <code>conf_script</code> of the project should include the following lines to select the appropriate plotly renderer:</p> <pre><code>import plotly.io as pio\npio.renderers.default = 'sphinx_gallery'\n</code></pre> <p>Optional: the <code>sphinx_gallery</code> renderer of plotly will not generate png thumbnails. For png thumbnails, you can use instead the <code>sphinx_gallery_png</code> renderer, and add <code>plotly.io._sg_scraper.plotly_sg_scraper</code> to the list of Image scrapers. The scraper requires you to install the orca package.</p> <p>This tutorial gives a few examples of plotly figures, starting with its high-level API plotly express.</p> <pre><code>import plotly.express as px\nimport numpy as np\n\ndf = px.data.tips()\nfig = px.bar(df, x='sex', y='total_bill', facet_col='day', color='smoker', barmode='group',\n             template='presentation+plotly'\n             )\nfig.update_layout(height=400)\nfig\n</code></pre> <p>In addition to the classical scatter or bar charts, plotly provides a large variety of traces, such as the sunburst hierarchical trace of the following example. plotly is an interactive library: click on one of the continents for a more detailed view of the drill-down.</p> <pre><code>df = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(df, path=['continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.update_layout(title_text='Life expectancy of countries and continents')\nfig\n</code></pre> <p>While plotly express is often the high-level entry point of the plotly library, complex figures mixing different types of traces can be made with the low-level <code>graph_objects</code> imperative API.</p> <pre><code>from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {'type':'domain'}]])\nfig.add_trace(go.Bar(x=[2018, 2019, 2020], y=[3, 2, 5], showlegend=False), 1, 1)\nfig.add_trace(go.Pie(labels=['A', 'B', 'C'], values=[1, 3, 6]), 1, 2)\nfig.update_layout(height=400, template='presentation', yaxis_title_text='revenue')\nfig\n\n# mkdocs_gallery_thumbnail_path = '_static/plotly_logo.png'\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.508 seconds)</p> <p></p> <p> Download Python source code: plot_09_plotly.py</p> <p> Download Jupyter notebook: plot_09_plotly.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_10_mayavi/","title":"Example with the mayavi graphing library","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_10_mayavi/#example-with-the-mayavi-graphing-library","title":"Example with the mayavi graphing library","text":"<p>Mkdocs-Gallery supports examples made with the mayavi library.</p> <p>This mayavi demo is from the mayavi documentation.</p> <p></p> <pre><code># Create the data.\nfrom numpy import pi, sin, cos, mgrid\ndphi, dtheta = pi/250.0, pi/250.0\n[phi,theta] = mgrid[0:pi+dphi*1.5:dphi,0:2*pi+dtheta*1.5:dtheta]\nm0 = 4; m1 = 3; m2 = 2; m3 = 3; m4 = 6; m5 = 2; m6 = 6; m7 = 4;\nr = sin(m0*phi)**m1 + cos(m2*phi)**m3 + sin(m4*theta)**m5 + cos(m6*theta)**m7\nx = r*sin(phi)*cos(theta)\ny = r*cos(phi)\nz = r*sin(phi)*sin(theta)\n\n# View it.\nfrom mayavi import mlab\ns = mlab.mesh(x, y, z)\n</code></pre> <p>Total running time of the script: ( 0 minutes  1.679 seconds)</p> <p></p> <p> Download Python source code: plot_10_mayavi.py</p> <p> Download Jupyter notebook: plot_10_mayavi.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/plot_11_pyvista/","title":"Example with the pyvista 3d plotting library","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/plot_11_pyvista/#example-with-the-pyvista-3d-plotting-library","title":"Example with the pyvista 3d plotting library","text":"<p>Mkdocs-Gallery supports examples made with the pyvista library. </p> <p>In order to use pyvista, the <code>conf_script</code> of the project should include the following lines to adequatly configure pyvista:</p> <pre><code>import pyvista\n\npyvista.BUILDING_GALLERY = True\npyvista.OFF_SCREEN = True\n\nconf = {\n    ...,\n    \"image_scrapers\": (\"pyvista\", ...),\n}\n</code></pre> <pre><code>import pyvista as pv\n</code></pre> <p>You can display an animation as a gif</p> <pre><code>sphere = pv.Sphere()\npl = pv.Plotter()\npl.enable_hidden_line_removal()\npl.add_mesh(sphere, show_edges=True, color=\"tan\")\n# for this example\npl.open_gif(\"animation.gif\", fps=10)\n# alternatively, to disable movie generation:\n# pl.show(auto_close=False, interactive=False)\ndelta_x = 0.05\ncenter = sphere.center\nfor angle in range(0, 360, 10):\n\n    rot = sphere.rotate_x(angle, point=(0, 0, 0), inplace=False)\n\n    pl.clear_actors()\n    pl.add_mesh(rot, show_edges=True, color=\"tan\")\n    pl.write_frame()\n\n\npl.show()\n</code></pre> <p></p> <p>or simply show a static plot</p> <pre><code>sphere = pv.Sphere()\npl = pv.Plotter()\npl.add_mesh(sphere, show_edges=True, color=\"tan\")\npl.show()\n</code></pre> <p></p> <p>Total running time of the script: ( 0 minutes  6.039 seconds)</p> <p></p> <p> Download Python source code: plot_11_pyvista.py</p> <p> Download Jupyter notebook: plot_11_pyvista.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/no_output/just_code/","title":"A short Python script","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/no_output/just_code/#a-short-python-script","title":"A short Python script","text":"<p>This demonstrates an example <code>.py</code> file that is not executed when gallery is generated (see Parsing and executing examples via matching patterns) but nevertheless gets included as an example. Note that no output is captured as this file is not executed.</p> <pre><code># Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\nfrom __future__ import print_function\nprint([i for i in range(10)])\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.000 seconds)</p> <p></p> <p> Download Python source code: just_code.py</p> <p> Download Jupyter notebook: just_code.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/no_output/mg_execution_times/","title":"Computation times","text":"<p>00:00.164 total execution time for generated_gallery_no_output files:</p> <p>+-----------------------------------------------------------------------------------------+-----------+--------+ | plot_raise (docs/examples/no_output/plot_raise.py)                   | 00:00.162 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_strings (docs/examples/no_output/plot_strings.py)             | 00:00.002 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_syntaxerror (docs/examples/no_output/plot_syntaxerror.py) | 00:00.001 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | just_code (docs/examples/no_output/just_code.py)                      | 00:00.000 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+</p>"},{"location":"generated/gallery/no_output/plot_raise/","title":"Example that fails to execute","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/no_output/plot_raise/#example-that-fails-to-execute","title":"Example that fails to execute","text":"<p>This example demonstrates a code block that raises an error and how any code blocks that follow are not executed.</p> <p>When scripts fail, their gallery thumbnail is replaced with the broken image stamp. This allows easy identification in the gallery display.</p> <p>You will also get the python traceback of the failed code block.</p> <pre><code># Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\n# sphinx_gallery_line_numbers = True\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.pcolormesh(np.random.randn(100, 100))\n</code></pre> <p></p> <p>Out:</p> <pre><code>&lt;matplotlib.collections.QuadMesh object at 0x7fd607ad4dc0&gt;\n</code></pre> <p>This next block will raise a NameError</p> <pre><code>iae\n</code></pre> <pre><code>Traceback (most recent call last):\n  File \"/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/no_output/plot_raise.py\", line 27, in &lt;module&gt;\n    iae\nNameError: name 'iae' is not defined\n</code></pre> <p>Sphinx gallery will stop executing the remaining code blocks after the exception has occurred in the example script. Nevertheless the html will still render all the example annotated text and code blocks, but no output will be shown.</p> <p>Here is another error raising block but will not be executed</p> <pre><code>plt.plot('Strings are not a valid argument for the plot function')\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.162 seconds)</p> <p></p> <p> Download Python source code: plot_raise.py</p> <p> Download Jupyter notebook: plot_raise.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/no_output/plot_strings/","title":"Constrained Text output frame","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/no_output/plot_strings/#constrained-text-output-frame","title":"Constrained Text output frame","text":"<p>This example captures the standard output and includes it in the example. If output is too long it becomes automatically framed into a text area.</p> <pre><code># Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\n\nprint('This is a long test Output\\n' * 50)\n</code></pre> <p>Out:</p> <pre><code>This is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\nThis is a long test Output\n</code></pre> <p>One line out</p> <pre><code>print('one line out')\n</code></pre> <p>Out:</p> <pre><code>one line out\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.002 seconds)</p> <p></p> <p> Download Python source code: plot_strings.py</p> <p> Download Jupyter notebook: plot_strings.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/no_output/plot_syntaxerror/","title":"SyntaxError","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/gallery/no_output/plot_syntaxerror/#syntaxerror","title":"SyntaxError","text":"<p>Example script with invalid Python syntax</p> <pre><code>Traceback (most recent call last):\n  File \"/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/no_output/plot_syntaxerror.py\", line 13\n    Invalid Python code\n            ^\nSyntaxError: invalid syntax\n</code></pre> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nExample with SyntaxError\n========================\n\nSphinx-Gallery uses Python's AST parser, thus you need to have written\nvalid python code for Sphinx-Gallery to parse it. If your script has a\nSyntaxError you'll be presented the traceback and the original code.\n\"\"\"\n# Code source: \u00d3scar N\u00e1jera\n# License: BSD 3 clause\n\nInvalid Python code\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.001 seconds)</p> <p></p> <p> Download Python source code: plot_syntaxerror.py</p> <p> Download Jupyter notebook: plot_syntaxerror.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/tutorials/","title":"Notebook style example","text":""},{"location":"generated/tutorials/#notebook-style-example","title":"Notebook style example","text":"<p>You can have multiple galleries, each one for different uses. For example, one gallery of examples and a different gallery for tutorials.</p> <p>This gallery demonstrates the ability of Mkdocs-Gallery to transform a file with a Jupyter notebook style structure (i.e., with alternating text and code).</p> <p> Alternating text and code </p> <p> Download all examples in Python source code: tutorials_python.zip</p> <p> Download all examples in Jupyter notebooks: tutorials_jupyter.zip</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/tutorials/mg_execution_times/","title":"Computation times","text":"<p>00:00.002 total execution time for generated_tutorials files:</p> <p>+--------------------------------------------------------------+-----------+--------+ | plot_parse (docs/tutorials/plot_parse.py) | 00:00.002 | 0.0 MB | +--------------------------------------------------------------+-----------+--------+</p>"},{"location":"generated/tutorials/plot_parse/","title":"Alternating text and code","text":"<p>Note</p> <p>Click here to download the full example code or to run this example in your browser via Binder</p>"},{"location":"generated/tutorials/plot_parse/#alternating-text-and-code","title":"Alternating text and code","text":"<p>Mkdocs-Gallery is capable of transforming Python files into MD files with a notebook structure. For this to be used you need to respect some syntax rules. This example demonstrates how to alternate text and code blocks and some edge cases. It was designed to be compared with the source Python script.</p> <p>This is the first text block and directly follows the header docstring above.</p> <pre><code>import numpy as np\n</code></pre> <pre><code># You can separate code blocks using either a single line of ``#``'s\n# (&gt;=20 columns), ``#%%``, or ``# %%``. For consistency, it is recommend that\n# you use only one of the above three 'block splitter' options in your project.\nA = 1\n\nimport matplotlib.pyplot as plt\n</code></pre> <p>Block splitters allow you alternate between code and text blocks and separate sequential blocks of code (above) and text (below).</p> <p>A line of <code>#</code>'s also works for separating blocks. The above line of <code>#</code>'s separates the text block above from this text block. Notice however, that separated text blocks only shows as a new lines between text, in the rendered output.</p> <pre><code>def dummy():\n    \"\"\"This should not be part of a 'text' block'\"\"\"\n\n    # %%\n    # This comment inside a code block will remain in the code block\n    pass\n\n# this line should not be part of a 'text' block\n</code></pre>"},{"location":"generated/tutorials/plot_parse/#_1","title":"Alternating text and code","text":"<p>The above syntax makes a line cut in Sphinx. Note the space between the first <code>#</code> and the line of <code>#</code>'s.</p> <p>Warning</p> <p>The next kind of comments are not supported (notice the line of <code>#</code>'s and the <code># %%</code> start at the margin instead of being indented like above) and become too hard to escape so just don't use code like this:</p> <pre><code>def dummy2():\n    \"\"\"Function docstring\"\"\"\n####################################\n# This comment\n# %%\n# and this comment inside python indentation\n# breaks the block structure and is not\n# supported\n    dummy2\n</code></pre> <pre><code>\"\"\"Free strings are not supported. They will be rendered as a code block\"\"\"\n</code></pre> <p>Out:</p> <pre><code>'Free strings are not supported. They will be rendered as a code block'\n</code></pre> <p>New lines can be included in your text block and the parser is capable of retaining this important whitespace to work with Sphinx. Everything after a block splitter and starting with <code>#</code> then one space, is interpreted by Sphinx-Gallery to be a MD text block. Keep your text block together using <code>#</code> and a space at the beginning of each line.</p>"},{"location":"generated/tutorials/plot_parse/#md-header-within-a-text-block","title":"MD header within a text block","text":"<p>Note that Markdown supports an alternate syntax for headings, that is far easier to read in the context of gallery examples:</p>"},{"location":"generated/tutorials/plot_parse/#md-header-within-a-text-block-alternate-syntax","title":"MD header within a text block, alternate syntax","text":"<pre><code>print('one')\n</code></pre> <p>Out:</p> <pre><code>one\n</code></pre> <pre><code># another way to separate code blocks shown above\nB = 1\n</code></pre> <p>Last text block.</p> <p>That's all folks !</p> plot_parse.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\nAlternating text and code\n=========================\n\nMkdocs-Gallery is capable of transforming Python files into MD files\nwith a notebook structure. For this to be used you need to respect some syntax\nrules. This example demonstrates how to alternate text and code blocks and some\nedge cases. It was designed to be compared with the\n[source Python script](./plot_parse.py).\n\"\"\"\n\n# %%\n# This is the first text block and directly follows the header docstring above.\n\nimport numpy as np\n\n# %%\n\n# You can separate code blocks using either a single line of ``#``'s\n# (&gt;=20 columns), ``#%%``, or ``# %%``. For consistency, it is recommend that\n# you use only one of the above three 'block splitter' options in your project.\nA = 1\n\nimport matplotlib.pyplot as plt\n\n# %%\n# Block splitters allow you alternate between code and text blocks **and**\n# separate sequential blocks of code (above) and text (below).\n\n##############################################################################\n# A line of ``#``'s also works for separating blocks. The above line of ``#``'s\n# separates the text block above from this text block. Notice however, that\n# separated text blocks only shows as a new lines between text, in the rendered\n# output.\n\ndef dummy():\n    \"\"\"This should not be part of a 'text' block'\"\"\"\n\n    # %%\n    # This comment inside a code block will remain in the code block\n    pass\n\n# this line should not be part of a 'text' block\n\n# %%\n#\n# ####################################################################\n#\n# The above syntax makes a line cut in Sphinx. Note the space between the first\n# ``#`` and the line of ``#``'s.\n\n# %%\n# !!! warning\n#     The next kind of comments are not supported (notice the line of ``#``'s\n#     and the ``# %%`` start at the margin instead of being indented like\n#     above) and become too hard to escape so just don't use code like this:\n#\n#         def dummy2():\n#             \"\"\"Function docstring\"\"\"\n#         ####################################\n#         # This comment\n#         # %%\n#         # and this comment inside python indentation\n#         # breaks the block structure and is not\n#         # supported\n#             dummy2\n#\n\n\"\"\"Free strings are not supported. They will be rendered as a code block\"\"\"\n\n# %%\n# New lines can be included in your text block and the parser\n# is capable of retaining this important whitespace to work with Sphinx.\n# Everything after a block splitter and starting with ``#`` then one space,\n# is interpreted by Sphinx-Gallery to be a MD text block. Keep your text\n# block together using ``#`` and a space at the beginning of each line.\n#\n# ## MD header within a text block\n#\n# Note that Markdown supports\n# [an alternate syntax for headings](https://www.markdownguide.org/basic-syntax/),\n# that is far easier to read in the context of gallery examples:\n#\n# MD header within a text block, alternate syntax\n# -----------------------------------------------\n#\n\nprint('one')\n\n# %%\n#\n\n# another way to separate code blocks shown above\nB = 1\n\n# %%\n# Last text block.\n#\n# That's all folks !\n#\n# ```python title=\"plot_parse.py\"\n# --8&lt;-- \"docs/tutorials/plot_parse.py\"\n# ```\n#\n</code></pre> <p>Total running time of the script: ( 0 minutes  0.002 seconds)</p> <p></p> <p> Download Python source code: plot_parse.py</p> <p> Download Jupyter notebook: plot_parse.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"}]}